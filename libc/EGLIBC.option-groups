                                                        -*- mode: text -*-

              The EGLIBC Component Configuration System
                  Jim Blandy <jimb@codesourcery.com>

Introduction

The GNU C library (GLIBC) provides a broad range of functionality,
ranging from internationalization support to transcendental
mathematical functions.  Its website boasts that "nearly all known and
useful functions from any other C library are available."  This
exhaustive approach has been one of GLIBC's strengths on desktop and
server systems, but it has also given GLIBC a large footprint, both in
memory and on disk, making it a challenge to use in embedded systems
with limited resources.

The Embedded GNU C library (EGLIBC) is a variant of the GNU C library
designed to work well on embedded systems.  In particular, EGLIBC's
component configuration system allows embedded developers to build
customized versions of the library that include only the features
their application uses, reducing its space requirements.

EGLIBC's component configuration system categorizes the library's
functions into "option groups", and allows you to include or exclude
option groups individually.  Some option groups depend on others;
EGLIBC tracks these relationships, and ensures that the selected
configuration yields a functioning library.


Consistent and Predictable Behavior

A flexible configuration system is a mixed blessing: if the options
offered are poorly designed, it can be hard to see which choices will
have the desired effects, and choices with obscure consequences can
make debugging difficult.  EGLIBC's configuration follows some general
principles to reduce these risks:

- EGLIBC has a single default configuration for each target
  architecture.

- In the default configuration, all option groups are enabled, and
  EGLIBC is upwardly API- and ABI-compatible with GLIBC.

- As much as possible, configurations only affect what functions are
  present, not how they behave.  If the system works with an option
  group disabled, it will still work with it enabled.

- As much as possible, configurations only select option groups ---
  they do not describe characteristics of the target architecture.

These rules mean that you have a simple debugging strategy available
if you suspect that your EGLIBC configuration might be the source of a
problem: fall back to the default configuration, re-test, and then
disable option groups one by one, until the problem reappears.


The Option Groups

To see the current full list of implemented option groups, refer to the
file 'option-groups.def' at the top of the source tree, or run
'make menuconfig' from the top-level build directory.

The POSIX.1-2001 specification includes a suggested partition of all
the functions in the POSIX C API into option groups: math functions
like 'sin' and 'cos'; networking functions like 'socket' and
'connect'; and so on.  EGLIBC could use this partitioning as the basis
for future option groups.


Implementation

The EGLIBC component configuration system resembles the approach used
by the Linux kernel to select device drivers, network protocols, and
other features.  A file named 'option-groups.config' in the top-level
build directory contains assignments to Make variables, each of which
enables or disables a particular option group.  If the variable's
value is set to 'y', then the option group is enabled; if it set to
anything else, the option group is omitted.  The file
'option-groups.defaults', at the top of the source tree, establishes
default values for all variables; all option groups are enabled by
default.

For example, the following 'option-groups.config' would omit locale
data, but include mathematical functions, and everything else:

   OPTION_EGLIBC_LOCALES = n
   OPTION_EGLIBC_LIBM = y

Like the Linux kernel, EGLIBC supports a similar set of '*config' make
targets to make it easier to create 'option-groups.config', with all
dependencies between option groups automatically satisfied.  Run
'make help' to see the list of supported make config targets.  For
example, 'make menuconfig' will update the current config utilising a
menu based program.

The option group names and their type (boolean, int, hex, string), help
description, and dependencies with other option groups, are described by
'option-groups.def' at the top of the source tree, analogous to the
'Kconfig' files in the Linux kernel.

In general, each option group variable controls whether a given set of
object files in EGLIBC is compiled and included in the final
libraries, or omitted from the build.

Each subdirectory's Makefile categorizes its routines, libraries, and
executables by option group.  For example, EGLIBC's 'math/Makefile'
places the 'libm' library in the OPTION_EGLIBC_LIBM group as follows:

   extra-libs-$(OPTION_EGLIBC_LIBM) := libm

Finally, common code in 'Makerules' cites the value of the variable
'extra-libs-y', selecting only those libraries that belong to enabled
option groups to be built.


Current Status and Future Directions

The EGLIBC component configuration system described here is still
under development.

We have used the system to subset some portions of EGLIBC's
functionality.  It needs to be extended to cover more of the library.
